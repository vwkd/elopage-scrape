// Generated by https://quicktype.io

import type { ErrorResponse } from "./common.ts";

export type ContentResponse = ErrorResponse | Content;

export interface Content {
  success: true;
  data: ContentData;
}

export interface ContentData {
  id: number;
  name: null;
  area: null;
  category_id: null;
  live: boolean | null;
  prefs: Prefs;
  seller_id: number;
  template: boolean | null;
  created_at: string;
  updated_at: string;
  content_blocks: ContentBlock[];
}

export interface ContentBlock {
  id: number;
  name: null;
  // (?) always single child
  children: Child[];
  content: ContentBlockContent;
  content_page_id: number;
  cover_id: null;
  data: ContentBlockData;
  embeddable_item_id: null;
  form: Form;
  is_row: boolean;
  lesson_id: null;
  parent_id: null;
  position: number;
  products: [];
  purpose: number;
  seller_id: null;
  template: boolean | null;
  created_at: string;
  updated_at: string;
  goods: [];
}

export interface Child {
  id: number;
  name: null;
  children: [];
  content: DataClass;
  content_page_id: number;
  cover_id: number | null;
  // (?) always duplicate of content
  data: DataClass;
  embeddable_item_id: null;
  form: Form;
  is_row: boolean;
  lesson_id: null;
  parent_id: number;
  position: number;
  products: [];
  purpose: number;
  seller_id: null;
  template: boolean | null;
  created_at: string;
  updated_at: string;
  goods: Good[];
  cover?: Cover;
}

// todo: differentiate depending on `form` in `Child`
export interface DataClass {
  list?: null | string;
  text?: string;
  width: string;
  max_width: number | string;
  padding_top: string;
  padding_left: string;
  transparency?: string;
  padding_right: string;
  padding_units: string;
  padding_bottom: string;
  background_color: string;
  original_width?: string;
  original_height?: string;
  vertical_alignment?: string;
  horizontal_alignment?: string;
  radius?: string;
  text_font?: string;
  text_size?: string;
  text_color?: string;
  text_style?: string;
  button_font?: string;
  button_size?: string;
  button_color?: string;
  button_style?: string;
  button_animation?: string;
  button_text_color?: string;
  button_view_style?: string;
  type?: string;
  player_color?: string;
  playbar_disabled?: boolean;
  integrations_background?: string;
  old_max_width?: number | string;
  cover_id?: string;
  background_image?: null | string;
}

export interface Cover {
  id: number;
  cover: string;
  file: CoverFile;
  file_content_type: null;
  file_crop_h: number;
  file_crop_w: number;
  file_crop_x: number;
  file_crop_y: number;
  file_file_name: null;
  file_file_size: null;
  file_name: null;
  file_remote_url: null;
  file_updated_at: null;
  link: null;
  ownerable_id: number;
  ownerable_type: string;
  thumb: string;
  type: string;
  uploaded_via_te: null;
  url: string;
  uuid: string;
  video_link: null;
  voucher_template: boolean;
  created_at: string;
  updated_at: string;
}

export interface CoverFile {
  s_100: string;
  s_640: string;
  s_1200: string;
  custom: string;
  original: string;
  name: string;
  cdn_url: string;
  download_url: string;
  size: number;
  content_type: ContentTypeEnum;
}

export enum ContentTypeEnum {
  ImageJPEG = "image/jpeg",
  ImageJpg = "image/jpg",
  VideoMp4 = "video/mp4",
  VideoQuicktime = "video/quicktime",
}

export enum Form {
  File = "file",
  Picture = "picture",
  Text = "text",
  Video = "video",
}

export interface Good {
  id: number;
  digital: Digital;
}

export interface Digital {
  id: number;
  name: null | string;
  is_image: boolean;
  is_audio: boolean;
  wistia_data: WistiaData | {} | null;
  file: DigitalFile;
}

export interface DigitalFile {
  content_type: null | string;
  icon: string;
  name: null | string;
  size: number | null;
  duration: number | null;
  original?: string;
}

// todo: none optional?
export interface WistiaData {
  id: number;
  name: string;
  type: WistiaDataType;
  assets: Asset[];
  status: Status;
  created: string;
  project: Project;
  success: boolean;
  updated: string;
  duration: number;
  progress: number;
  hashed_id: string;
  thumbnail: Thumbnail;
  description: string;
  archived: boolean;
  embedCode: string;
}

export interface Asset {
  url: string;
  type: AssetType;
  width: number;
  height: number;
  fileSize: number;
  contentType: ContentTypeEnum;
}

export enum AssetType {
  HDMp4VideoFile = "HdMp4VideoFile",
  IphoneVideoFile = "IphoneVideoFile",
  MdMp4VideoFile = "MdMp4VideoFile",
  Mp4VideoFile = "Mp4VideoFile",
  OriginalFile = "OriginalFile",
  StillImageFile = "StillImageFile",
  StoryboardFile = "StoryboardFile",
}

export interface Project {
  id: number;
  name: string;
  hashed_id: string;
}

export enum Status {
  Processing = "processing",
  Queued = "queued",
  Ready = "ready",
}

export interface Thumbnail {
  url: string;
  width: number;
  height: number;
}

export enum WistiaDataType {
  Video = "Video",
}

export interface ContentBlockContent {
  list: null;
}

export interface ContentBlockData {
  background_image: null;
}

export interface Prefs {
}
